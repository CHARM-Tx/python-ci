name: Generate documentation

on:
  workflow_call:
    inputs:
      environment_file:
        description: filename of conda env file
        required: false
        type: string
        default: environment.yml
      module_name:
        type: string
        description: the name of the source code module to document
        required: true
      path:
        type: string
        description: Path of package, relative to the repo root
        required: false
        default: '.'

jobs:
  generate-docs:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    defaults:
      run:
        #Â Necessary for the mamba-org/provision-with-micromamba action
        shell: bash --login -eo pipefail {0}

    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      # Configure conda
      - name: Set up micromamba
        if: ${{ inputs.environment_file != '' }}
        uses: mamba-org/provision-with-micromamba@5fe88d370c741fc3567126d17c5af0b9620bd60d
        with:
          cache-downloads: true
          cache-downloads-key: "mamba-${{ hashFiles(inputs.environment_file) }}"
          environment-file: ./${{ inputs.path }}/${{ inputs.environment_file }}
          environment-name: document

      - name: Cache pip downloads
        uses: actions/cache@v3
        with:
          path: "~/.cache/pip"
          key: "pip-${{ hashFiles('setup.cfg') }}"
          restore-keys: |
            pip-${{ hashFiles('setup.cfg') }}
            pip-

      - name: Log in to AWS CodeArtifact
        run: |
          aws codeartifact login --tool pip --repository charm-pypi --domain charm-pypi \
          --domain-owner ${{ secrets.AWS_ACCOUNT_ID }} --region eu-west-1

      - name: Install package
        working-directory: ./${{ inputs.path }}
        run: python -m pip install .[tests]

      - name: Generate documentation
        working-directory: ./${{ inputs.path }}
        run: python -m pdoc ${{ inputs.module_name }} --docformat google --output-directory html_docs

      - name: Upload to s3 (dry run)
        working-directory: ./${{ inputs.path }}
        run: |
          VERSION=${{ github.ref_name }}
          echo "Version: $VERSION"
          aws s3 sync --dryrun html_docs/ s3://charmtx-python-doc/${{inputs.module_name}}/${VERSION}/
          aws s3 sync --dryrun html_docs/ s3://charmtx-python-doc/${{inputs.module_name}}/latest/

      - name: Upload to s3
        working-directory: ./${{ inputs.path }}
        run: |
          VERSION=${{ github.ref_name }}
          echo "Version: $VERSION"
          aws s3 sync html_docs/ s3://charmtx-python-doc/${{inputs.module_name}}/${VERSION}/
          aws s3 sync html_docs/ s3://charmtx-python-doc/${{inputs.module_name}}/latest/
        if: startsWith(github.ref, 'refs/tags/v')
